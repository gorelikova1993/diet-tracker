package com.example.model;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class ShoppingList {
    // –•—Ä–∞–Ω–∏–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ –∏—Ö —Å—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    private final Map<Ingredient, Double> ingredients = new HashMap<>();
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –±–ª—é–¥–æ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
     * @param dish ‚Äî –±–ª—é–¥–æ, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–µ—Ä—ë–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
     */
    public void addDish(Dish dish) {
        for (IngredientAmount amount : dish.getRecipe().getIngredients()) {
            ingredients.merge(amount.getIngredient(), amount.getWeightInGrams(), Double::sum);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏
     * @param meal ‚Äî –ø—Ä–∏—ë–º –ø–∏—â–∏ (–∑–∞–≤—Ç—Ä–∞–∫, –æ–±–µ–¥ –∏ —Ç.–¥.)
     */
    public void addMeal(Meal meal) {
        for (Dish dish : meal.getDishes()) {
            addDish(dish);
        }
    }
    
    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏–∑ —Ä–∞—Ü–∏–æ–Ω–∞ –Ω–∞ –¥–µ–Ω—å
     * @param dayPlan ‚Äî —Ä–∞—Ü–∏–æ–Ω –Ω–∞ –¥–µ–Ω—å
     */
    public void addDayPlan(DayPlan dayPlan) {
        for (Meal meal : dayPlan.getMeals()) {
            addMeal(meal);
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
     */
    public Map<Ingredient, Double> getIngredients() {
        return Collections.unmodifiableMap(ingredients);
    }
    
    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
     */
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("üõí –°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:\n");
        
        for (Map.Entry<Ingredient, Double> entry : ingredients.entrySet()) {
            Ingredient ingredient = entry.getKey();
            double totalWeight = entry.getValue();
            
            // –ï—Å–ª–∏ —ç—Ç–æ —à—Ç—É–∫–æ–æ–±—Ä–∞–∑–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —è–π—Ü–∞), –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            if (ingredient.isMeasurableInPieces()) {
                int pieces = (int) Math.ceil(totalWeight / ingredient.getWeightPerPiece());
                sb.append(String.format(" - %s ‚Äî %.0f –≥ (%d —à—Ç)\n", ingredient.getName(), totalWeight, pieces));
            } else {
                sb.append(String.format(" - %s ‚Äî %.0f –≥\n", ingredient.getName(), totalWeight));
            }
        }
        
        return sb.toString();
    }
}
