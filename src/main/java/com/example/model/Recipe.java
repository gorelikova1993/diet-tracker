package com.example.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class Recipe {
    private final String name;
    private final  List<String> description;
    private final List<IngredientAmount> ingredients; // –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    private final Map<String, String> substitutions;   // "–≤–µ—Ç—á–∏–Ω–∞" ‚Üí "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞" –Ω–∞ —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–µ
    // –ù–æ–≤–æ–µ –ø–æ–ª–µ:
    private final int portions; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π –ø–æ —Ä–µ—Ü–µ–ø—Ç—É
    
    //TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä  –±–µ–∑ portions6 default 1
    
    public Recipe(String name, List<String> description, List<IngredientAmount> ingredients, Map<String, String> substitutions, int portions) {
        this.name = Objects.requireNonNull(name);
        this.description = new ArrayList<>(description);
        this.ingredients = new ArrayList<>(ingredients);
        this.substitutions = substitutions == null ? new HashMap<>() : new HashMap<>(substitutions);
        this.portions = portions;
    }
    
    public Recipe(String name, List<String> description, List<IngredientAmount> ingredients, int portions) {
        this.name = name;
        this.description = description;
        this.ingredients = ingredients;
        this.portions = portions;
        this.substitutions = new HashMap<>();
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–∞ 1 –ø–æ—Ä—Ü–∏—é
    public List<IngredientAmount> getIngredientsForPortion(int targetPortions) {
        List<IngredientAmount> portionedIngredients = new ArrayList<>();
        for (IngredientAmount amount : ingredients) {
            double weightPerPortion = amount.getWeightInGrams() / portions * targetPortions;
            Unit unit = amount.getUnit();
            if (unit == Unit.PIECES) {
                // –ï—Å–ª–∏ —à—Ç—É–∫–∏ ‚Äî –æ–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö
                int pieces = (int) Math.ceil((amount.getQuantity() / (double) portions) * targetPortions);
                portionedIngredients.add(new IngredientAmount(amount.getIngredient(), pieces, Unit.PIECES));
            } else {
                // –î–ª—è –≥—Ä–∞–º–º–æ–≤ –∏–ª–∏ –º–ª
                portionedIngredients.add(new IngredientAmount(
                        amount.getIngredient(),
                        weightPerPortion,
                        unit
                ));
            }
        }
        return portionedIngredients;
    }
    
    public String getName() {
        return name;
    }
    
    public List<String> getDescription() {
        return description;
    }
    
    public List<IngredientAmount> getIngredients() {
        return ingredients;
    }
    
    public Map<String, String> getSubstitutions() {
        return substitutions;
    }
    
    // –ú–µ—Ç–æ–¥ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("üî∏ ").append(name).append("\n");
        
        // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        for (IngredientAmount amount : ingredients) {
            sb.append(amount.toString()).append("\n");
        }
        
        // –ó–∞–º–µ–Ω—ã
        if (!substitutions.isEmpty()) {
            sb.append("–ó–∞–º–µ–Ω–∞: ");
            for (Map.Entry<String, String> sub : substitutions.entrySet()) {
                sb.append(sub.getKey()).append(" ‚ÜîÔ∏è ").append(sub.getValue()).append(", ");
            }
            sb.delete(sb.length() - 2, sb.length()).append("\n");
        }
        
        // –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        sb.append("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n");
        for (int i = 0; i < description.size(); i++) {
            sb.append(i + 1).append(". ").append(description.get(i)).append("\n");
        }
        
        return sb.toString();
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
     *
     * @return —Å—É–º–º–∞—Ä–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏ –±–ª—é–¥–∞
     */
    public double getTotalCalories(int targetPortions) {
        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞:
        // 1. –ë–µ—Ä—ë–º –∫–∞–ª–æ—Ä–∏–∏ –Ω–∞ 100 –≥—Ä–∞–º–º –∏–∑ Ingredient
        // 2. –£–º–Ω–æ–∂–∞–µ–º –Ω–∞ –≤–µ—Å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
        // 3. –î–µ–ª–∏–º –Ω–∞ 100, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞–ª–æ—Ä–∏–∏ –¥–ª—è –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        // –ü—Ä–∏–º–µ—Ä: —è–π—Ü–æ (157 –∫–∫–∞–ª/100–≥) √ó 50 –≥ = 78.5 –∫–∫–∞–ª
        return ingredients.stream()
                .mapToDouble(ia -> ia.getIngredient().getCaloriesPer100g() * ia.getWeightInGrams() / 100)
                .sum() / portions * targetPortions;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–µ–ª–∫–æ–≤ –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
     *
     * @return —Å—É–º–º–∞—Ä–Ω—ã–µ –±–µ–ª–∫–∏ –±–ª—é–¥–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
     */
    public double getTotalProteins(int targetPortions) {
        return ingredients.stream()
                .mapToDouble(ia -> ia.getIngredient().getProteinsPer100g() * ia.getWeightInGrams() / 100)
                .sum() / portions * targetPortions;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏—Ä–æ–≤ –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
     *
     * @return —Å—É–º–º–∞—Ä–Ω—ã–µ –∂–∏—Ä—ã –±–ª—é–¥–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
     */
    public double getTotalFats(int targetPortions) {
        return ingredients.stream()
                .mapToDouble(ia -> ia.getIngredient().getFatsPer100g() * ia.getWeightInGrams() / 100)
                .sum() / portions * targetPortions;
    }
    
    /**
     * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–µ–≤–æ–¥–æ–≤ –±–ª—é–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
     *
     * @return —Å—É–º–º–∞—Ä–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã –±–ª—é–¥–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
     */
    public double getTotalCarbs(int targetPortions) {
        return ingredients.stream()
                .mapToDouble(ia -> ia.getIngredient().getCarbsPer100g() * ia.getWeightInGrams() / 100)
                .sum() / portions * targetPortions;
    }
}
