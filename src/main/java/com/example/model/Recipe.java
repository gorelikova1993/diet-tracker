package com.example.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

public class Recipe {
    private final String name;
    private final  List<String> description;
    private final List<IngredientAmount> ingredients; // –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + –µ–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    private final Map<String, String> substitutions;   // "–≤–µ—Ç—á–∏–Ω–∞" ‚Üí "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞" –Ω–∞ —á—Ç–æ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç –≤ —Ä–µ—Ü–µ–ø—Ç–µ
    
    public Recipe(String name, List<String> description, List<IngredientAmount> ingredients, Map<String, String> substitutions) {
        this.name = Objects.requireNonNull(name);
        this.description = new ArrayList<>(description);
        this.ingredients = new ArrayList<>(ingredients);
        this.substitutions = substitutions == null ? new HashMap<>() : new HashMap<>(substitutions);
    }
    
    public Recipe(String name, List<String> description, List<IngredientAmount> ingredients) {
        this.name = name;
        this.description = description;
        this.ingredients = ingredients;
        this.substitutions = new HashMap<>();
    }
    
    public String getName() {
        return name;
    }
    
    public List<String> getDescription() {
        return description;
    }
    
    public List<IngredientAmount> getIngredients() {
        return ingredients;
    }
    
    public Map<String, String> getSubstitutions() {
        return substitutions;
    }
    
    // –ú–µ—Ç–æ–¥ toString –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ—Ü–µ–ø—Ç–∞
    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("üî∏ ").append(name).append("\n");
        
        // –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        for (IngredientAmount amount : ingredients) {
            sb.append(amount.toString()).append("\n");
        }
        
        // –ó–∞–º–µ–Ω—ã
        if (!substitutions.isEmpty()) {
            sb.append("–ó–∞–º–µ–Ω–∞: ");
            for (Map.Entry<String, String> sub : substitutions.entrySet()) {
                sb.append(sub.getKey()).append(" ‚ÜîÔ∏è ").append(sub.getValue()).append(", ");
            }
            sb.delete(sb.length() - 2, sb.length()).append("\n");
        }
        
        // –®–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è
        sb.append("–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ:\n");
        for (int i = 0; i < description.size(); i++) {
            sb.append(i + 1).append(". ").append(description.get(i)).append("\n");
        }
        
        return sb.toString();
    }
}
